# Generated by Django 2.1.4 on 2018-12-14 17:16

from django.db import migrations, models
import django.db.models.deletion
import sciwagblocks.blocks
import hitcount.models
import sciwagblocks.blocks
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0040_page_draft_title'),
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailimages', '0021_image_file_hash'),
        ('main', '0002_create_homepage'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('repeat_in_subnav', models.BooleanField(default=False, help_text="If checked, a link to this page will be repeated alongside it's direct children when displaying a sub-navigation for this page.", verbose_name='repeat in sub-navigation')),
                ('repeated_item_text', models.CharField(blank=True, help_text="e.g. 'Section home' or 'Overview'. If left blank, the page title will be used.", max_length=255, verbose_name='repeated item link text')),
                ('body', wagtail.core.fields.StreamField(
                    [
                        ('paragraph', wagtail.core.blocks.RichTextBlock()), 
                        ('quote', wagtail.core.blocks.StructBlock(
                            [
                                ('quote', wagtail.core.blocks.TextBlock(help_text='Quote text.', required=True, rows=3)), 
                                ('author', wagtail.core.blocks.CharBlock(help_text='Author of the quoted text.', required=False)), 
                                ('source', wagtail.core.blocks.CharBlock(help_text='Source of the quoted text.', required=False))
                            ], classname='full')
                        ), 
                        ('image', wagtail.images.blocks.ImageChooserBlock()), 
                        ('embed', wagtail.embeds.blocks.EmbedBlock()), 
                        ('markdown', sciwagblocks.blocks.MarkdownxBlock()), 
                        ('columns', wagtail.core.blocks.StructBlock(
                            [
                                ('left', wagtail.core.blocks.StreamBlock(
                                    [
                                        ('paragraph', wagtail.core.blocks.RichTextBlock()), 
                                        ('image', wagtail.core.blocks.StructBlock(
                                            [
                                                ('image', wagtail.images.blocks.ImageChooserBlock()), 
                                                ('caption', sciwagblocks.blocks.MarkdownxBlock(required=False))
                                            ])
                                        ), 
                                        ('markdown', sciwagblocks.blocks.MarkdownxBlock()), 
                                        ('pages', wagtail.core.blocks.PageChooserBlock())
                                    ], icon='arrow-left', label='Left column content')
                                ), 
                                ('right', wagtail.core.blocks.StreamBlock(
                                    [
                                        ('paragraph', wagtail.core.blocks.RichTextBlock()), 
                                        ('image', wagtail.core.blocks.StructBlock(
                                            [
                                                ('image', wagtail.images.blocks.ImageChooserBlock()), 
                                                ('caption', sciwagblocks.blocks.MarkdownxBlock(required=False))
                                            ])
                                        ), 
                                        ('markdown', sciwagblocks.blocks.MarkdownxBlock()), 
                                        ('pages', wagtail.core.blocks.PageChooserBlock())
                                    ], icon='arrow-right', label='Right column content')
                                )
                            ])
                        ), 
                        ('pages', wagtail.core.blocks.PageChooserBlock()), 
                        ('document', wagtail.documents.blocks.DocumentChooserBlock())
                    ])
                ),
                ('show_search', models.BooleanField(default=True, help_text='Adds search form to the page sidebar.', verbose_name='Show search on sidebar')),
                ('show_tag_cloud', models.BooleanField(default=True, help_text='Adds tag cloud to the page sidebar.', verbose_name='Show tag cloud')),
                ('show_categories', models.BooleanField(default=True, help_text='Adds categories to the page sidebar.', verbose_name='Show categories')),
                ('header_image', models.ForeignKey(blank=True, help_text='Image, that appears right after the title.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model, hitcount.models.HitCountMixin),
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('repeat_in_subnav', models.BooleanField(default=False, help_text="If checked, a link to this page will be repeated alongside it's direct children when displaying a sub-navigation for this page.", verbose_name='repeat in sub-navigation')),
                ('repeated_item_text', models.CharField(blank=True, help_text="e.g. 'Section home' or 'Overview'. If left blank, the page title will be used.", max_length=255, verbose_name='repeated item link text')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('body', wagtail.core.fields.RichTextField(blank=True, help_text='Text before the form.', verbose_name='Body')),
                ('send_email_to_visitor', models.BooleanField(default=True, help_text='Indicates if email should be sent to the visitor, who submitted the form (in case of EmailField is in form).', verbose_name='Send email to visitor')),
                ('visitor_email_subject', models.CharField(blank=True, help_text='Subject of the email to be sent to the visitor, who submitted the form.', max_length=255, verbose_name='Visitor email subject')),
                ('visitor_email_body', models.TextField(blank=True, help_text='Text of the email to be sent to the visitor, who submitted the form.', verbose_name='Visitor email text')),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True, help_text='Text, that appears after form submission.', verbose_name='Text after form submission')),
                ('show_search', models.BooleanField(default=True, help_text='Adds search form to the page sidebar.', verbose_name='Show search on sidebar')),
                ('show_tag_cloud', models.BooleanField(default=True, help_text='Adds tag cloud to the page sidebar.', verbose_name='Show tag cloud')),
                ('show_categories', models.BooleanField(default=True, help_text='Adds categories to the page sidebar.', verbose_name='Show categories')),
                ('header_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model, hitcount.models.HitCountMixin),
        ),
        migrations.CreateModel(
            name='PostPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.core.fields.StreamField(
                    [
                        ('cut', wagtail.core.blocks.CharBlock(classname='full subtitle', help_text='After this block the post will be cutted when displayed on the home page. On the post page this field is ignored.')), 
                        ('paragraph', wagtail.core.blocks.RichTextBlock()), 
                        ('quote', wagtail.core.blocks.StructBlock(
                            [
                                ('quote', wagtail.core.blocks.TextBlock(help_text='Quote text.', required=True, rows=3)), 
                                ('author', wagtail.core.blocks.CharBlock(help_text='Author of the quoted text.', required=False)), 
                                ('source', wagtail.core.blocks.CharBlock(help_text='Source of the quoted text.', required=False))
                            ], classname='full')
                        ), 
                        ('image', wagtail.core.blocks.StructBlock(
                            [
                                ('image', wagtail.images.blocks.ImageChooserBlock()), 
                                ('caption', sciwagblocks.blocks.MarkdownxBlock(required=False))
                            ])
                        ), 
                        ('embed', wagtail.embeds.blocks.EmbedBlock()), 
                        ('document', wagtail.documents.blocks.DocumentChooserBlock(help_text='All the text in other blocks, which is the same as document title will be replaced with the link to the document.')), 
                        ('markdown', sciwagblocks.blocks.MarkdownxBlock()), 
                        ('equation', wagtail.core.blocks.StructBlock(
                            [
                                ('equation', sciwagblocks.blocks.EquationBlock()), 
                                ('caption', sciwagblocks.blocks.MarkdownxBlock(required=False))
                            ])
                        ), 
                        ('pages', wagtail.core.blocks.PageChooserBlock()), 
                        ('columns', wagtail.core.blocks.StructBlock(
                            [
                                ('left', wagtail.core.blocks.StreamBlock(
                                    [
                                        ('paragraph', wagtail.core.blocks.RichTextBlock()), 
                                        ('image', wagtail.core.blocks.StructBlock(
                                            [
                                                ('image', wagtail.images.blocks.ImageChooserBlock()), 
                                                ('caption', sciwagblocks.blocks.MarkdownxBlock(required=False))
                                            ])
                                        ), 
                                        ('markdown', sciwagblocks.blocks.MarkdownxBlock()), 
                                        ('pages', wagtail.core.blocks.PageChooserBlock())
                                    ], icon='arrow-left', label='Left column content')
                                ), 
                                ('right', wagtail.core.blocks.StreamBlock(
                                    [
                                        ('paragraph', wagtail.core.blocks.RichTextBlock()), 
                                        ('image', wagtail.core.blocks.StructBlock(
                                            [
                                                ('image', wagtail.images.blocks.ImageChooserBlock()), 
                                                ('caption', sciwagblocks.blocks.MarkdownxBlock(required=False))
                                            ])
                                        ), 
                                        ('markdown', sciwagblocks.blocks.MarkdownxBlock()), 
                                        ('pages', wagtail.core.blocks.PageChooserBlock())
                                    ], icon='arrow-right', label='Right column content')
                                )
                            ])
                        )
                    ])
                ),
                ('pin_on_home', models.BooleanField(default=False, help_text='Indicates if the Post is pinned on the Home page.', verbose_name='Pin on Home page')),
                ('show_sidebar', models.BooleanField(default=True, help_text='Indicates if the sidebar with contents, figures and equations is shown on the page.', verbose_name='Show sidebar')),
                ('show_comments', models.BooleanField(default=True, help_text='Indicates if comments are shown on the page.', verbose_name='Show comments')),
                ('generate_figure_numbers', models.BooleanField(default=False, help_text='Indcates if the Figure number (such as Figure 1) should be generated for standalone images in the StreamField.', verbose_name='Generate figure numbers')),
                ('generate_equation_numbers', models.BooleanField(default=False, help_text='Indicated if equation number should be added on the right side of the standalone equation blog in the StreamField.', verbose_name='Generate equation numbers')),
                ('categories', modelcluster.fields.ParentalManyToManyField(blank=True, to='main.BlogCategory', verbose_name='Categories')),
                ('header_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', hitcount.models.HitCountMixin),
        ),
        migrations.CreateModel(
            name='PostPageBlogCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blog_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_pages', to='main.BlogCategory')),
                ('post_page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_categories', to='main.PostPage')),
            ],
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='main.PostPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TagProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'proxy': True,
                'indexes': [],
            },
            bases=('taggit.tag',),
        ),
        migrations.AddField(
            model_name='homepage',
            name='navbar_image',
            field=models.ForeignKey(blank=True, help_text='Image, that appears in navbar.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Brand image'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='slogan',
            field=models.CharField(blank=True, help_text='Phrase, that appears in navbar on the right to the brand image.', max_length=255, verbose_name='Slogan'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='title_in_navbar',
            field=models.BooleanField(default=True, help_text='Indicates, if title of the page is showing in navbar.', verbose_name='Show home page title in navbar'),
        ),
        migrations.AddField(
            model_name='posttag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='main_posttag_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='postpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text=None, through='main.PostTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='formfield',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='main.FormPage'),
        ),
        migrations.AlterUniqueTogether(
            name='postpageblogcategory',
            unique_together={('post_page', 'blog_category')},
        ),
    ]
